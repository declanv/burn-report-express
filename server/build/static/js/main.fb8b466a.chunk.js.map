{"version":3,"sources":["assets/img/sun.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","OPEN_UV_KEY","process","placesBaseUrl","uvApiBaseUrl","Search","props","handleScriptLoad","autocomplete","google","maps","places","Autocomplete","document","getElementById","types","setFields","addListener","handlePlaceSelect","addressObject","getPlace","address","address_components","today","Date","toISOString","geometry","location","lat","lng","uvApiUrl","axios","get","headers","then","response","setState","city","long_name","query","formatted_address","uvRisk","Math","round","data","result","uv","report","console","log","catch","error","state","id","className","this","src","sun","alt","url","onLoad","placeholder","defaultValue","Component","Boolean","window","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,iC,oQCMrCC,EAAcC,GACdC,EAAa,sDAFAD,GAEA,qBACbE,EAAe,uCA+ENC,E,YA5EX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAQVC,iBAAmB,WAKf,EAAKC,aAAe,IAAIC,OAAOC,KAAKC,OAAOC,aACvCC,SAASC,eAAe,gBALZ,CACZC,MAAO,CAAC,cAOZ,EAAKP,aAAaQ,UAAU,CAAC,qBAAsB,oBAAqB,aACxE,EAAKR,aAAaS,YAAY,gBAAiB,EAAKC,oBAnBrC,EAqBnBA,kBAAoB,WAChB,IAAIC,EAAgB,EAAKX,aAAaY,WAClCC,EAAUF,EAAcG,mBACxBC,GAAQ,IAAIC,MAAOC,cACnBC,EAAWP,EAAcO,SAASC,SAClCC,EAAMF,EAASE,MACfC,EAAMH,EAASG,MACfC,EAAW1B,EAAewB,EAAM,QAAUC,EAAM,OAASN,EAE7DQ,IAAMC,IAAIF,EAAU,CAChBG,QAAS,CACL,iBAAkBhC,KAGzBiC,MAAK,SAAAC,GACEd,GACA,EAAKe,SACD,CACIC,KAAMhB,EAAQ,GAAGiB,UACjBC,MAAOpB,EAAcqB,kBACrBC,OAAQC,KAAKC,MAAMR,EAASS,KAAKC,OAAOC,IACxCC,OAAQ,SAIpBC,QAAQC,IAAId,EAASS,SAExBM,OAAM,SAAAC,GACHH,QAAQC,IAAIE,OA/ChB,EAAKC,MAAQ,CACTf,KAAM,GACNE,MAAO,GACPE,OAAQ,EACRM,OAAQ,IANG,E,sEAqDf,OACI,yBAAKM,GAAG,eAAeC,UAAS,eAAUC,KAAKH,MAAMX,SACjD,yBAAKe,IAAKC,IAAKH,UAAU,sBAAsBI,IAAI,QACnD,yBAAKF,IAAKC,IAAKH,UAAU,sBAAsBI,IAAI,QACnD,yBAAKF,IAAKC,IAAKH,UAAU,sBAAsBI,IAAI,QACnD,yBAAKF,IAAKC,IAAKH,UAAU,iBAAiBI,IAAI,QAC9C,yBAAKL,GAAG,yBACJ,wBAAIA,GAAG,QAAP,eACA,kBAAC,IAAD,CACIM,IAAKxD,EACLyD,OAAQL,KAAKhD,mBAEjB,uBAAG8C,GAAG,gBAAN,uBACA,2BAAOA,GAAG,eAAeQ,YAAY,GAAGC,aAAcP,KAAKH,MAAMb,QACjE,wBAAIc,GAAG,cAAcC,UAAWC,KAAKH,MAAML,QAA3C,8BACgCQ,KAAKH,MAAMX,c,GArE1CsB,aCEDC,QACW,cAA7BC,OAAOtC,SAASuC,UAEe,UAA7BD,OAAOtC,SAASuC,UAEhBD,OAAOtC,SAASuC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxD,SAASC,eAAe,SD6H3C,kBAAmBwD,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,kB","file":"static/js/main.fb8b466a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sun.7e82d79b.svg\";","import React, {Component} from 'react';\nimport './App.scss';\nimport axios from 'axios';\nimport Script from 'react-load-script';\nimport sun from \"./assets/img/sun.svg\";\nconst PLACES_KEY = process.env.REACT_APP_PLACES_API_KEY;\nconst OPEN_UV_KEY = process.env.REACT_APP_OPENUV_API_KEY;\nconst placesBaseUrl = `https://maps.googleapis.com/maps/api/js?key=${PLACES_KEY}&libraries=places`;\nconst uvApiBaseUrl = 'https://api.openuv.io/api/v1/uv?lat=';\n\nclass Search extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            city: '',\n            query: '',\n            uvRisk: 0,\n            report: ''\n        };\n    }\n    handleScriptLoad = () => {\n        const options = {\n            types: ['(cities)'],\n        };\n        /* global google */\n        this.autocomplete = new google.maps.places.Autocomplete(\n            document.getElementById('autocomplete'),\n            options,\n        )\n        this.autocomplete.setFields(['address_components', 'formatted_address', 'geometry']);\n        this.autocomplete.addListener('place_changed', this.handlePlaceSelect);\n    }\n    handlePlaceSelect = () => {\n        let addressObject = this.autocomplete.getPlace();\n        let address = addressObject.address_components;\n        let today = new Date().toISOString();\n        let geometry = addressObject.geometry.location;\n        let lat = geometry.lat();\n        let lng = geometry.lng();\n        let uvApiUrl = uvApiBaseUrl + lat + '&lng=' + lng + '&dt=' + today;\n\n        axios.get(uvApiUrl, {\n            headers: {\n                'x-access-token': OPEN_UV_KEY\n            }\n        })\n        .then(response => {\n            if (address) {\n                this.setState(\n                    {\n                        city: address[0].long_name,\n                        query: addressObject.formatted_address,\n                        uvRisk: Math.round(response.data.result.uv),\n                        report: 'show'\n                    }\n                )\n            }\n            console.log(response.data);\n        })\n        .catch(error => {\n            console.log(error);\n        });\n    }\n    render() {\n        return (\n            <div id='appContainer' className={`risk-${this.state.uvRisk}`}>\n                <img src={sun} className=\"sun-background quad\" alt=\"sun\" />\n                <img src={sun} className=\"sun-background trip\" alt=\"sun\" />\n                <img src={sun} className=\"sun-background dupe\" alt=\"sun\" />\n                <img src={sun} className=\"sun-background\" alt=\"sun\" />\n                <div id='inputMessageContainer'>\n                    <h1 id='logo'>Burn Report</h1>\n                    <Script\n                        url={placesBaseUrl}\n                        onLoad={this.handleScriptLoad}\n                    />\n                    <p id='instructions'>Enter your location</p>\n                    <input id='autocomplete' placeholder='' defaultValue={this.state.query}></input>\n                    <h1 id='riskMessage' className={this.state.report}>\n                        Your UV risk for today is: {this.state.uvRisk}\n                    </h1>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Search;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}